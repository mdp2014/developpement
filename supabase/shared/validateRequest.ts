// shared/validateRequest.ts
import { isAllowedOrigin } from "./validateOrigin.ts";
import { rejectResponse } from "./http.ts";
import { getCsrfFromCookie, getCookieValue } from "./cookie.ts";
import { getSupabaseClientWithToken } from "./supabaseClient.ts";
import { log, warn } from "./logger.ts"; 

const CSRF_HEADER = "x-csrf-token";

export async function validateRequest(
  req: Request,
  requiredModule?: string,
  allowedMethods: string[] = ["GET", "POST", "PATCH", "DELETE", "OPTIONS"]
): Promise<{ userId: string; token: string } | Response> {
  const origin = new URL(req.url).origin;
  const method = req.method.toUpperCase();

  // CORS Preflight
  if (method === "OPTIONS") {
    return new Response(null, {
      status: 204,
      headers: {
        "Access-Control-Allow-Origin": origin,
        "Access-Control-Allow-Credentials": "true",
        "Access-Control-Allow-Methods": allowedMethods.join(", "),
        "Access-Control-Allow-Headers": "Content-Type, Authorization, x-csrf-token",
      },
    });
  }

  // ‚ùó Rejet si m√©thode non autoris√©e
  if (!allowedMethods.includes(method)) {
    warn(`üö´ M√©thode non autoris√©e : ${method}`);
    return rejectResponse("M√©thode non autoris√©e", 405);
  }

  // V√©rification de l'origine
  if (!isAllowedOrigin(origin)) {
    warn("‚õî [PROXY] Origine interdite:", origin);
    return rejectResponse("Origine non autoris√©e");
  }

  // Authentification par cookie
  const cookieHeader = req.headers.get("cookie") || "";
  const token = getCookieValue(cookieHeader, "sb-access-token");
  log("üîç [PROXY] Token pr√©sent:", token ? "‚úÖ" : "‚ùå");

  if (!token) {
    warn("üö´ [PROXY] Token manquant");
    return rejectResponse("Utilisateur non authentifi√©");
  }

  const supabase = getSupabaseClientWithToken(token);
  const { data: { user }, error: authError } = await supabase.auth.getUser(token);

  if (authError || !user) {
    warn("‚ùå Auth √©chou√©e :", authError?.message);
    return rejectResponse("Utilisateur non authentifi√©");
  }

  const userId = user.id;

  // V√©rifie les droits sur le module si demand√©
  if (requiredModule) {
    const { data: userData, error: userError } = await supabase
      .from("user")
      .select("module")
      .eq("id", userId)
      .maybeSingle();

    if (userError || !userData) {
      warn("‚ùå Erreur r√©cup√©ration module pour user:", userError?.message);
      return rejectResponse("Erreur serveur ou utilisateur non trouv√©");
    }

    const modules = (userData.module || "").split("-");
    if (!modules.includes(requiredModule)) {
      warn(`‚õî Acc√®s interdit au module '${requiredModule}' pour user ${userId}`);
      return rejectResponse("Acc√®s interdit au module");
    }
  }

  // CSRF
  if (["POST", "PATCH", "DELETE"].includes(method)) {
    const csrfTokenHeader = req.headers.get(CSRF_HEADER);
    const csrfTokenCookie = getCsrfFromCookie(cookieHeader);
    log("üîê [PROXY] CSRF Header:", csrfTokenHeader);
    log("üîê [PROXY] CSRF Cookie:", csrfTokenCookie);

    if (csrfTokenHeader !== csrfTokenCookie) {
      warn("üö® [PROXY] CSRF mismatch ou token manquant");
      return rejectResponse("CSRF token invalide ou manquant");
    }
  }

  return { userId, token };
}
